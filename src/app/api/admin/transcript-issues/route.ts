import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { verifyAdmin } from '@/lib/auth'

const prisma = new PrismaClient()

// üìù GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤
export async function GET(req: NextRequest) {
  const auth = verifyAdmin(req)
  if (auth instanceof NextResponse) return auth

  const issues = await prisma.transcriptIssue.findMany()
  return NextResponse.json({ issues })
}

// üìù POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
export async function POST(req: NextRequest) {
  const auth = verifyAdmin(req)
  if (auth instanceof NextResponse) return auth

  const { student_id, name, year, dept } = await req.json()
  if (!student_id || !name || !year || !dept) {
    return NextResponse.json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö' }, { status: 400 })
  }

  await prisma.transcriptIssue.create({
    data: { student_id, name, year, dept }
  })

  return NextResponse.json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
}
